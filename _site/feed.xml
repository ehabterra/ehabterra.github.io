<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-03T10:00:43+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ehab’s Website</title><subtitle>An amazing website.</subtitle><author><name>Ehab Terra</name></author><entry><title type="html">🔥 Why Audit Logging Doesn’t Belong in Your Main Database</title><link href="http://localhost:4000/audit-log" rel="alternate" type="text/html" title="🔥 Why Audit Logging Doesn’t Belong in Your Main Database" /><published>2025-06-03T00:00:00+03:00</published><updated>2025-06-03T00:00:00+03:00</updated><id>http://localhost:4000/audit_log</id><content type="html" xml:base="http://localhost:4000/audit-log"><![CDATA[<p>How to implement scalable audit trails without compromising database performance</p>

<p><strong>Let’s fix a common anti-pattern:</strong> Storing audit logs in your production database. It <em>seems</em> easy—until it tanks performance and bloats storage.</p>

<p>I learned this lesson the hard way. A colleague once insisted on implementing audit logs directly in our main DB, dismissing my concerns. Days later, it was done. I warned him of the impending database doom. Months passed, and then the inevitable: a frantic message about our database ballooning by a staggering 600MB per minute, causing critical issues that demanded immediate action.</p>

<h2 id="-the-hidden-costs">🚨 The Hidden Costs</h2>

<pre><code class="language-mermaid">pie
    title "Database Pain Points from Audit Logs"
    "Slowed Transactions" : 35
    "Storage Bloat" : 25
    "Backup Overhead" : 20
    "Lock Contention" : 20
</code></pre>

<h3 id="real-world-impact">Real-world impact:</h3>

<ul>
  <li>
    <p>40% slower writes during peak</p>
  </li>
  <li>
    <p>3x storage growth in 6 months</p>
  </li>
  <li>
    <p>Compliance reports timing out</p>
  </li>
</ul>

<h3 id="the-solution-structured-logging--decoupled-architecture-"><strong>The Solution: Structured Logging &amp; Decoupled Architecture ✨</strong></h3>

<p>The path to a robust, scalable, and cost-effective audit logging strategy involves two key pillars:</p>

<ol>
  <li>Structured Logging:
Move beyond plain text! Format your logs as machine-readable key-value pairs, ideally JSON. This transforms logs into actionable data, enabling:
    <ul>
      <li><strong>Enhanced Searchability &amp; Filtering:</strong> Quickly find specific events by user_id, event_type, error_code, etc.</li>
      <li><strong>Automated Analysis:</strong> Seamless integration with log management and SIEM tools.</li>
      <li><strong>Improved Debugging:</strong> Rich context helps pinpoint root causes faster.</li>
      <li><strong>Consistency &amp; Scalability:</strong> Standardized formats across distributed systems.</li>
    </ul>

    <p><strong>Best Practice:</strong> Always use UTC and ISO 8601 for timestamps (e.g., 2025-01-08T14:30:00Z). <strong>Never log sensitive data</strong> like passwords or PII.</p>

    <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c">// Go: JSON-structured log example</span>
 <span class="k">type</span> <span class="n">AuditEvent</span> <span class="k">struct</span> <span class="p">{</span>
     <span class="n">Timestamp</span> <span class="kt">string</span> <span class="s">`json:"timestamp"`</span> <span class="c">// ISO 8601 UTC</span>
     <span class="n">UserID</span>    <span class="kt">string</span> <span class="s">`json:"user_id"`</span> 
     <span class="n">Action</span>    <span class="kt">string</span> <span class="s">`json:"action"`</span>   <span class="c">// "login", "delete"</span>
     <span class="n">Entity</span>    <span class="kt">string</span> <span class="s">`json:"entity"`</span>   <span class="c">// "order", "user"</span>
 <span class="p">}</span>
</code></pre></div>    </div>

    <p><strong>Why?</strong></p>
    <ul>
      <li>Enables filtering by <code class="language-plaintext highlighter-rouge">user_id</code>, <code class="language-plaintext highlighter-rouge">action</code>, etc.
        <ul>
          <li>Integrates seamlessly with Security Information and Event Management (SIEM) tools</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Decoupled Cloud Storage &amp; Reporting:<br />
Offload audit logs to purpose-built cloud services. This ensures your main application database remains performant and allows for specialized tools for analysis and reporting.<br />
<strong>Cloud Alternatives for Audit Logs:</strong>
    <ul>
      <li><strong>Google Cloud Platform (GCP):</strong>
        <ul>
          <li><strong>Cloud Logging:</strong> Fully managed service for log storage, search, analysis, monitoring, and alerting. Use Log Buckets for storage and Logs Explorer/Analytics for querying.</li>
          <li><strong>BigQuery:</strong> For complex analytical SQL queries on large log datasets.</li>
          <li><strong>Cloud Storage:</strong> Cost-effective for long-term archival.</li>
        </ul>
      </li>
      <li><strong>Amazon Web Services (AWS):</strong>
        <ul>
          <li><strong>CloudTrail:</strong> Records AWS API calls for governance and compliance.</li>
          <li><strong>CloudWatch Logs:</strong> Centralizes logs from applications and AWS services for real-time monitoring.</li>
          <li><strong>Amazon S3:</strong> Highly scalable object storage for long-term archival.</li>
          <li><strong>Amazon OpenSearch Service:</strong> For powerful log analysis and visualization (part of the ELK stack).</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h3 id="empowering-business-admins-reporting--querying-"><strong>Empowering Business Admins: Reporting &amp; Querying 📊</strong></h3>

<p>Audit logs aren’t just for tech teams; they’re a goldmine for business intelligence! Build a separate reporting layer, ideally a data warehouse or data mart, optimized for analytical queries. This empowers back-office teams with:</p>

<ul>
  <li><strong>Intuitive Search &amp; Query:</strong> Easy access to specific user actions, transactions, or compliance data.</li>
  <li><strong>Data Visualization:</strong> Dashboards, charts, and trendlines for quick insights.</li>
  <li><strong>Automated Alerting:</strong> Proactive notifications for security violations or business rule breaches.</li>
  <li><strong>Compliance Verification:</strong> Streamlined generation of audit trails for regulatory needs.</li>
</ul>

<p><strong>Tools:</strong> Generic log management platforms like the <strong>ELK Stack (Elasticsearch, Logstash, Kibana)</strong>, cloud-native services (GCP Cloud Logging Analytics, AWS CloudWatch Logs), and specialized audit management software such as ComplianceQuest, AuditBoard, etc.</p>

<h3 id="gcp-cloud-logging-with-golang-example-"><strong>GCP Cloud Logging with GoLang Example 🚀</strong></h3>

<p>Here’s how you can create and query structured audit logs using Go with GCP Cloud Logging:</p>
<h4 id="log-to-cloud-logging">Log to Cloud Logging:</h4>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">logAudit</span><span class="p">(</span><span class="n">event</span> <span class="n">AuditEvent</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">entry</span> <span class="o">:=</span> <span class="n">logging</span><span class="o">.</span><span class="n">Entry</span><span class="p">{</span>
        <span class="n">Payload</span><span class="o">:</span>   <span class="n">event</span><span class="p">,</span>
        <span class="n">Severity</span><span class="o">:</span> <span class="n">logging</span><span class="o">.</span><span class="n">Info</span><span class="p">,</span>
    <span class="p">}</span>
	
    <span class="k">return</span> <span class="n">logger</span><span class="o">.</span><span class="n">Log</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span> <span class="c">// Async by default</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="query-in-bigquery">Query in BigQuery:</h4>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- Daily active users report</span>
<span class="k">SELECT</span>
  <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">active_users</span><span class="p">,</span>
  <span class="nb">DATE</span><span class="p">(</span><span class="nb">timestamp</span><span class="p">)</span> <span class="k">AS</span> <span class="k">day</span>
<span class="k">FROM</span> <span class="nv">`project.audit.logs`</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="k">day</span>
</code></pre></div></div>

<h3 id="our-awesome-audit-trail-blueprint-️"><strong>Our Awesome Audit Trail Blueprint! 🏗️</strong></h3>

<pre><code class="language-mermaid">graph TD
    A[Your App/Service ✍️] -- Sends neatly packed logs (Structured Logs!) --&gt; B(Log Central: Cloud Logging ☁️ / CloudWatch Logs 🦉 / Fluentd 🚀)
B -- Routes those log packages 📬 --&gt; C{Log Vault: Cloud Buckets 📦 / S3 🗄️ / Elasticsearch 🔍}
C -- For serious analysis &amp; long-term storage 💾 --&gt; D[Data Brain: Data Warehouse 🧠 / BigQuery 📊 / OpenSearch 🔭 / ClickHouse ⚡]
D -- Turns data into cool pictures &amp; insights 📈 --&gt; E[Insight Hub: BI Tools 💡 / Custom Dashboards 🖼️ / Kibana ✨ / Grafana 📊]
E -- Delivers the juicy details &amp; alerts 🚨 --&gt; F[Biz Admins 💼 / Security Squad 🛡️]
A -- Keeps doing its main job 🏃‍♂️ --&gt; G[Main App DB 💾]
G -. "No Log Spam Here!" 🚫 .-&gt; B
</code></pre>

<p><strong>In short:</strong> We’re giving your audit logs their own awesome pipeline so they can be super useful without making your main app slow and grumpy! 😎</p>

<h3 id="-key-takeaways">🧩 Key Takeaways</h3>
<ol>
  <li><strong>Never log to production DB –</strong> it’s for transactions, not analytics.</li>
  <li><strong>Structure your logs –</strong> JSON/Protobuf &gt; plain text.</li>
  <li><strong>Use cloud-native tools –</strong> GCP/AWS handle scaling and retention.</li>
</ol>

<p><strong>👉 Ready to level up your logging game?</strong> Let me know your thoughts or share how you manage audit logs in your projects!</p>

<p>#AuditLogging #StructuredLogging #CloudComputing #GCP #AWS #GoLang #BackendEngineering #DevOps #Security #Compliance #DataArchitecture</p>

<h4 id="resources"><strong>Resources</strong></h4>

<ol>
  <li>Audit Logging: What It Is &amp; How It Works , Datadog, <a href="https://www.datadoghq.com/knowledge-center/audit-logging/">https://www.datadoghq.com/knowledge-center/audit-logging/</a></li>
  <li>Audit Trail - OutSystems 11 Documentation, <a href="https://success.outsystems.com/documentation/11/app_architecture/audit_trail/">https://success.outsystems.com/documentation/11/app_architecture/audit_trail/</a></li>
  <li>Real-Time and Periodic Database Auditing: What Is Better? - DataSunrise, <a href="https://www.datasunrise.com/knowledge-center/real-time-vs-periodic-database-auditing/">https://www.datasunrise.com/knowledge-center/real-time-vs-periodic-database-auditing/</a></li>
  <li>Introducing SQL Audit Logs for Fabric Data Warehouse - Microsoft Fabric Blog, <a href="https://blog.fabric.microsoft.com/en-US/blog/introducing-sql-audit-logs-for-fabric-datawarehouse/">https://blog.fabric.microsoft.com/en-US/blog/introducing-sql-audit-logs-for-fabric-datawarehouse/</a></li>
  <li>Best BI / Monitoring / Logging Tools - Plutora.com, <a href="https://www.plutora.com/ci-cd-tools-categories/bi-monitoring-logging">https://www.plutora.com/ci-cd-tools-categories/bi-monitoring-logging</a></li>
  <li>Pattern: Audit logging - Microservices.io, <a href="https://microservices.io/patterns/observability/audit-logging.html">https://microservices.io/patterns/observability/audit-logging.html</a></li>
  <li>Monitoring and Reducing Database I/O Contention - BizTalk Server , Microsoft Learn, <a href="https://learn.microsoft.com/en-us/biztalk/technical-guides/monitoring-and-reducing-database-i-o-contention">https://learn.microsoft.com/en-us/biztalk/technical-guides/monitoring-and-reducing-database-i-o-contention</a></li>
  <li>Monitoring and Reducing DTC Log File Disk I/O Contention - BizTalk Server, <a href="https://learn.microsoft.com/en-us/biztalk/technical-guides/monitoring-and-reducing-dtc-log-file-disk-i-o-contention">https://learn.microsoft.com/en-us/biztalk/technical-guides/monitoring-and-reducing-dtc-log-file-disk-i-o-contention</a></li>
  <li>How does throughput impact database performance? - Milvus, <a href="https://milvus.io/ai-quick-reference/how-does-throughput-impact-database-performance">https://milvus.io/ai-quick-reference/how-does-throughput-impact-database-performance</a></li>
  <li>Database Performance: Impact of Storage Limitations - Simplyblock, <a href="https://www.simplyblock.io/blog/database-performance-storage-limitations/">https://www.simplyblock.io/blog/database-performance-storage-limitations/</a></li>
  <li>What Is Structured Logging and Why You Should Use It - Sematext, <a href="https://sematext.com/glossary/structured-logging/">https://sematext.com/glossary/structured-logging/</a></li>
  <li>The Power of Structured Logging: Why It Matters in Modern Development - Atatus, <a href="https://www.atatus.com/blog/structured-logging-guide/">https://www.atatus.com/blog/structured-logging-guide/</a></li>
  <li>5 Elk Stack Pros and Cons - ChaosSearch, <a href="https://www.chaossearch.io/blog/elk-stack-pros-and-cons">https://www.chaossearch.io/blog/elk-stack-pros-and-cons</a></li>
  <li>Centralized Logging Systems – System Design , GeeksforGeeks, <a href="https://www.geeksforgeeks.org/centralized-logging-systems-system-design/">https://www.geeksforgeeks.org/centralized-logging-systems-system-design/</a></li>
  <li>What Is Structured Logging and How to Use It - Loggly, <a href="https://www.loggly.com/use-cases/what-is-structured-logging-and-how-to-use-it/">https://www.loggly.com/use-cases/what-is-structured-logging-and-how-to-use-it/</a></li>
  <li>Structured Logging Best Practices: Implementation Guide with Examples - Uptrace, <a href="https://uptrace.dev/glossary/structured-logging">https://uptrace.dev/glossary/structured-logging</a></li>
  <li>Best 10 Audit Tools of 2025 - ComplianceQuest, <a href="https://www.compliancequest.com/audit-tools/">https://www.compliancequest.com/audit-tools/</a></li>
  <li>6 Common Log File Formats , CrowdStrike, <a href="https://www.crowdstrike.com/en-us/cybersecurity-101/next-gen-siem/log-file-formats/">https://www.crowdstrike.com/en-us/cybersecurity-101/next-gen-siem/log-file-formats/</a></li>
  <li>logging package - cloud.google.com/go/logging - Go Packages, <a href="https://pkg.go.dev/cloud.google.com/go/logging">https://pkg.go.dev/cloud.google.com/go/logging</a></li>
  <li>Setting Up Cloud Logging for Go - Google Cloud, <a href="https://cloud.google.com/logging/docs/setup/go">https://cloud.google.com/logging/docs/setup/go</a></li>
  <li>Logging to stderr and stdout golang Google Cloud Platform - Stack Overflow, <a href="https://stackoverflow.com/questions/57888588/logging-to-stderr-and-stdout-golang-google-cloud-platform">https://stackoverflow.com/questions/57888588/logging-to-stderr-and-stdout-golang-google-cloud-platform</a></li>
  <li>Logging client libraries , Google Cloud, <a href="https://cloud.google.com/logging/docs/reference/libraries">https://cloud.google.com/logging/docs/reference/libraries</a></li>
  <li>Cloud Logging documentation - Google Cloud, <a href="https://cloud.google.com/logging/docs">https://cloud.google.com/logging/docs</a></li>
  <li>Cloud Logging overview , Google Cloud, <a href="https://cloud.google.com/logging/docs/overview">https://cloud.google.com/logging/docs/overview</a></li>
  <li>Audit logging , Cloud Search - Google for Developers, <a href="https://developers.google.com/workspace/cloud-search/docs/guides/audit-logging-manual">https://developers.google.com/workspace/cloud-search/docs/guides/audit-logging-manual</a></li>
  <li>Cloud Audit Logs overview - Google Cloud, <a href="https://cloud.google.com/logging/docs/audit">https://cloud.google.com/logging/docs/audit</a></li>
  <li>Import logs from Cloud Storage to Cloud Logging , Cloud Architecture Center , Google Cloud, <a href="https://cloud.google.com/architecture/import-logs-from-storage-to-logging">https://cloud.google.com/architecture/import-logs-from-storage-to-logging</a></li>
  <li>AWS services for logging and monitoring - AWS Prescriptive Guidance - AWS Documentation, <a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/logging-monitoring-for-application-owners/aws-services-logging-monitoring.html">https://docs.aws.amazon.com/prescriptive-guidance/latest/logging-monitoring-for-application-owners/aws-services-logging-monitoring.html</a></li>
  <li>Logging and monitoring in AWS Audit Manager, <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/security-logging-and-monitoring.html">https://docs.aws.amazon.com/audit-manager/latest/userguide/security-logging-and-monitoring.html</a></li>
  <li>Architecture overview - Centralized Logging with OpenSearch - AWS Documentation, <a href="https://docs.aws.amazon.com/solutions/latest/centralized-logging-with-opensearch/architecture-overview.html">https://docs.aws.amazon.com/solutions/latest/centralized-logging-with-opensearch/architecture-overview.html</a></li>
  <li>Document and centralize architecture diagrams - AWS Security Incident Response User Guide, <a href="https://docs.aws.amazon.com/security-ir/latest/userguide/document-and-centralize-architecture-diagrams.html">https://docs.aws.amazon.com/security-ir/latest/userguide/document-and-centralize-architecture-diagrams.html</a></li>
  <li>List log entries - Google Cloud, <a href="https://cloud.google.com/logging/docs/samples/logging-list-log-entries">https://cloud.google.com/logging/docs/samples/logging-list-log-entries</a></li>
</ol>]]></content><author><name>Ehab Terra</name></author><category term="Audit" /><category term="Logging" /><category term="CloudComputing" /><category term="GCP" /><category term="AWS" /><category term="GoLang" /><category term="Backend" /><category term="DevOps" /><category term="Security" /><category term="Compliance" /><category term="DataArchitecture" /><summary type="html"><![CDATA[How to implement scalable audit trails without compromising database performance]]></summary></entry><entry><title type="html">Go 1.20’s `errors.Join` and the Great Unwrap Mystery: A Developer’s Journey</title><link href="http://localhost:4000/go-errors" rel="alternate" type="text/html" title="Go 1.20’s `errors.Join` and the Great Unwrap Mystery: A Developer’s Journey" /><published>2025-05-20T00:00:00+03:00</published><updated>2025-05-20T00:00:00+03:00</updated><id>http://localhost:4000/Go1.20_Errors_Join_Blog</id><content type="html" xml:base="http://localhost:4000/go-errors"><![CDATA[<p>Understanding Go’s error handling evolution and the hidden power of joined errors</p>

<h2 id="introduction">Introduction</h2>

<p>As a Go developer, I once thought <code class="language-plaintext highlighter-rouge">errors.Join</code> would simplify my error handling—until I discovered it silently breaks <code class="language-plaintext highlighter-rouge">errors.Unwrap</code>. Let me walk you through this rabbit hole, complete with source code spelunking and a community debate that’s still simmering.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">err1</span> <span class="o">:=</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"error 1"</span><span class="p">)</span>
<span class="n">err2</span> <span class="o">:=</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"error 2"</span><span class="p">)</span>
<span class="n">joined</span> <span class="o">:=</span> <span class="n">errors</span><span class="o">.</span><span class="n">Join</span><span class="p">(</span><span class="n">err1</span><span class="p">,</span> <span class="n">err2</span><span class="p">)</span>

<span class="c">// Wait, why is this nil?!</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">errors</span><span class="o">.</span><span class="n">Unwrap</span><span class="p">(</span><span class="n">joined</span><span class="p">))</span> <span class="c">// nil</span>
</code></pre></div></div>

<hr />

<h2 id="the-three-faces-of-go-errors">The Three Faces of Go Errors</h2>

<p>Go 1.20 introduced three error types that left me baffled:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// 1. For errors.Join(...)</span>
<span class="k">type</span> <span class="n">joinError</span> <span class="k">struct</span> <span class="p">{</span> <span class="n">errs</span> <span class="p">[]</span><span class="kt">error</span> <span class="p">}</span>

<span class="c">// 2. For fmt.Errorf with multiple %w verbs (NEW)</span>
<span class="k">type</span> <span class="n">wrapErrors</span> <span class="k">struct</span> <span class="p">{</span> <span class="n">msg</span> <span class="kt">string</span><span class="p">;</span> <span class="n">errs</span> <span class="p">[]</span><span class="kt">error</span> <span class="p">}</span>

<span class="c">// 3. Traditional fmt.Errorf("%w", err)</span>
<span class="k">type</span> <span class="n">wrapError</span> <span class="k">struct</span> <span class="p">{</span> <span class="n">msg</span> <span class="kt">string</span><span class="p">;</span> <span class="n">err</span> <span class="kt">error</span> <span class="p">}</span>
</code></pre></div></div>

<h3 id="why-the-complexity">Why the Complexity?</h3>
<p>Russ Cox explains in the Go 2 error handling proposal:</p>

<blockquote>
  <p>“We made a conscious choice to use explicit error results and explicit error checks to avoid the pitfalls of implicit exception handling.”</p>
</blockquote>

<p>But explicit doesn’t always mean simple. Let’s dissect the chaos.</p>

<hr />

<h2 id="fmterrorfs-hidden-surprise-multiple-w-verbs-new"><code class="language-plaintext highlighter-rouge">fmt.Errorf</code>’s Hidden Surprise: Multiple %w Verbs (NEW)</h2>

<p>You might think <code class="language-plaintext highlighter-rouge">fmt.Errorf</code> with multiple <code class="language-plaintext highlighter-rouge">%w</code> works like <code class="language-plaintext highlighter-rouge">errors.Join</code>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wrapped</span> <span class="o">:=</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"wrapper: %w, %w"</span><span class="p">,</span> <span class="n">err1</span><span class="p">,</span> <span class="n">err2</span><span class="p">)</span>
</code></pre></div></div>

<p>But under the hood, this creates a <code class="language-plaintext highlighter-rouge">wrapErrors</code> struct (not <code class="language-plaintext highlighter-rouge">joinError</code>). While it preserves error order, <code class="language-plaintext highlighter-rouge">errors.Unwrap</code> still fails:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">errors</span><span class="o">.</span><span class="n">Unwrap</span><span class="p">(</span><span class="n">wrapped</span><span class="p">))</span> <span class="c">// nil (same as errors.Join!)</span>
</code></pre></div></div>

<h3 id="key-insight">Key Insight:</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">errors.Join</code>: Flattens errors into a slice.</li>
  <li><code class="language-plaintext highlighter-rouge">fmt.Errorf("%w, %w")</code>: Preserves hierarchy but still breaks <code class="language-plaintext highlighter-rouge">Unwrap</code>.</li>
</ul>

<hr />

<h2 id="why-unwrap-ignores-slices">Why <code class="language-plaintext highlighter-rouge">Unwrap</code> Ignores Slices</h2>

<p>The <code class="language-plaintext highlighter-rouge">errors.Unwrap</code> function only handles single errors:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// go/src/errors/wrap.go (Go 1.20+)</span>
<span class="c">// Source: https://cs.opensource.google/go/go/+/refs/tags/go1.20:src/errors/wrap.go</span>
<span class="k">func</span> <span class="n">Unwrap</span><span class="p">(</span><span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">u</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">err</span><span class="o">.</span><span class="p">(</span><span class="k">interface</span><span class="p">{</span> <span class="n">Unwrap</span><span class="p">()</span> <span class="kt">error</span> <span class="p">})</span>  <span class="c">// ❌ No slice support!</span>
    <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">u</span><span class="o">.</span><span class="n">Unwrap</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="the-go-teams-rationale">The Go Team’s Rationale:</h3>

<ol>
  <li><strong>Backward Compatibility</strong>: Existing code relies on <code class="language-plaintext highlighter-rouge">Unwrap</code> for single-error chains.</li>
  <li><strong>Explicit Design</strong>: Forces developers to handle multi-errors intentionally.</li>
</ol>

<hr />

<h2 id="the-community-backlash-proposal-66455-new">The Community Backlash: Proposal #66455 (NEW)</h2>

<p>Developers protested this behavior in <a href="https://github.com/golang/go/issues/66455">GitHub #66455</a>, arguing:</p>

<blockquote>
  <p>“Unwrap should support slices to simplify error traversal.”</p>
</blockquote>

<h3 id="why-the-proposal-was-declined">Why the Proposal Was Declined:</h3>

<ul>
  <li>Lack of evidence for widespread issues.</li>
  <li>Concerns about complicating the error interface.</li>
</ul>

<h3 id="my-take">My Take:</h3>

<p>While the Go team prioritizes stability, this leaves developers writing boilerplate like:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">UnwrapAll</span><span class="p">(</span><span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">[]</span><span class="kt">error</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">e</span> <span class="o">:=</span> <span class="n">err</span><span class="o">.</span><span class="p">(</span><span class="k">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="k">interface</span><span class="p">{</span> <span class="n">Unwrap</span><span class="p">()</span> <span class="p">[]</span><span class="kt">error</span> <span class="p">}</span><span class="o">:</span> <span class="c">// joinError/wrapErrors</span>
        <span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="n">Unwrap</span><span class="p">()</span>
    <span class="k">case</span> <span class="k">interface</span><span class="p">{</span> <span class="n">Unwrap</span><span class="p">()</span> <span class="kt">error</span> <span class="p">}</span><span class="o">:</span>   <span class="c">// Traditional wrapError</span>
        <span class="k">return</span> <span class="p">[]</span><span class="kt">error</span><span class="p">{</span><span class="n">e</span><span class="o">.</span><span class="n">Unwrap</span><span class="p">()}</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="k">return</span> <span class="no">nil</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="lessons-from-the-go-2-proposal">Lessons from the Go 2 Proposal</h2>

<p>Russ Cox’s vision for Go 2 error handling clarifies why we’re here:</p>

<ol>
  <li><strong>Explicit &gt; Implicit</strong>: Avoid “invisible” error checks like exceptions.</li>
  <li><strong>Toolability First</strong>: Errors must work with static analysis and debugging tools.</li>
  <li><strong>Wrapping Without Breaking</strong>: The <code class="language-plaintext highlighter-rouge">errors.Wrapper</code> interface aims to standardize error chains.</li>
</ol>

<p>Yet, as Cox admits:</p>

<blockquote>
  <p>“Existing code must keep working. Any changes must interoperate.”</p>
</blockquote>

<p>This explains why <code class="language-plaintext highlighter-rouge">Unwrap</code> remains restrictive—backward compatibility trumps convenience.</p>

<hr />

<h2 id="best-practices-for-2025">Best Practices for 2025</h2>

<h3 id="use-errorsjoin-for">Use <code class="language-plaintext highlighter-rouge">errors.Join</code> For:</h3>
<ul>
  <li>Flat error aggregation (e.g., batch processing).</li>
  <li>Cases where error hierarchy doesn’t matter.</li>
</ul>

<h3 id="use-fmterrorf-for">Use <code class="language-plaintext highlighter-rouge">fmt.Errorf</code> For:</h3>
<ul>
  <li>Ordered error wrapping (e.g., contextual chains).</li>
  <li>Compatibility with <code class="language-plaintext highlighter-rouge">errors.Is</code>/<code class="language-plaintext highlighter-rouge">errors.As</code>.</li>
</ul>

<h3 id="always-test-unwrap-behavior">Always Test <code class="language-plaintext highlighter-rouge">Unwrap</code> Behavior:</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestJoinUnwrap</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">joined</span> <span class="o">:=</span> <span class="n">errors</span><span class="o">.</span><span class="n">Join</span><span class="p">(</span><span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"err1"</span><span class="p">),</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"err2"</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">errors</span><span class="o">.</span><span class="n">Unwrap</span><span class="p">(</span><span class="n">joined</span><span class="p">)</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="s">"Unwrap should return nil for joinError!"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="conclusion-embrace-the-chaos">Conclusion: Embrace the Chaos</h2>

<p>Go’s error handling is a trade-off:</p>

<ul>
  <li><strong>Pros</strong>: Explicitness, toolability, and no hidden control flow.</li>
  <li><strong>Cons</strong>: Boilerplate and confusing edge cases.</li>
</ul>

<h3 id="join-the-discussion">Join the Discussion:</h3>

<ul>
  <li>How do you handle multi-errors?</li>
  <li>Should <code class="language-plaintext highlighter-rouge">Unwrap</code> support slices? Vote in the comments!</li>
</ul>

<hr />

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://go.dev/blog/go1.13-errors">Error Handling in Go 1.13</a></li>
  <li><a href="https://go.dev/blog/error-handling-and-go">Error Handling and Go</a></li>
  <li><a href="https://dev.to/fredgitonga/errors-are-values-a-guide-to-error-handling-in-go-3ohi">Errors Are Values: A Guide to Error Handling in Go</a></li>
</ul>]]></content><author><name>Ehab Terra</name></author><category term="GoLang" /><summary type="html"><![CDATA[Understanding Go's error handling evolution and the hidden power of joined errors]]></summary></entry></feed>